interface WalletBalance {
  currency: string;
  amount: number;
  blockchain: string;
}

interface FormattedWalletBalance extends WalletBalance {
  formatted: string;
  usdValue: number;
}

interface Props extends BoxProps {}

const WalletPage: React.FC<Props> = (props: Props) => {
  const { children, ...rest } = props;
  const classes = useStyles();
  const balances = useWalletBalances();
  const prices = usePrices();

  const getPriority = useCallback((blockchain: string): number => {
    switch (blockchain) {
      case 'Osmosis':
        return 100;
      case 'Ethereum':
        return 50;
      case 'Arbitrum':
        return 30;
      case 'Zilliqa':
        return 20;
      case 'Neo':
        return 20;
      default:
        return -99;
    }
  }, []);

  const sortedBalances = useMemo(() => {
    return balances
      .filter((balance: WalletBalance) => getPriority(balance.blockchain) > -99 && balance.amount > 0)
      .sort((lhs: WalletBalance, rhs: WalletBalance) => getPriority(rhs.blockchain) - getPriority(lhs.blockchain));
  }, [balances, getPriority]);

  const rows = useMemo(() => {
    return sortedBalances.map((balance: WalletBalance, index: number) => {
      const usdValue = prices[balance.currency] * balance.amount;
      const formattedBalance: FormattedWalletBalance = {
        ...balance,
        formatted: balance.amount.toFixed(2),
        usdValue: usdValue,
      };

      return (
        <WalletRow
          className={classes.row}
          key={index}
          amount={formattedBalance.amount}
          usdValue={formattedBalance.usdValue}
          formattedAmount={formattedBalance.formatted}
        />
      );
    });
  }, [sortedBalances, prices, classes.row]);

  return (
    <div {...rest}>
      {rows}
    </div>
  );
};

export default WalletPage;